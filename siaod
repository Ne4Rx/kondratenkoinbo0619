#include <iostream>
#include <cstring>
#include <ctime>
#include<vector>
 using namespace std;
 class QueuePriority
{
    string * Wait;
    int * Pri;
    int MaxQueueLength;
    int QueueLength;
 public:
   QueuePriority(int m);
 ~QueuePriority();
 void push(string c,int p);
    string Extract();
 void Clear();
  bool IsEmpty();
 bool IsFull();
    int GetCount();
    void Show();
};
 void QueuePriority::Show(){
    cout<<"\n-------------------------------------\n";
    for(int i=0;i<QueueLength;i++){
        cout<<Wait[i]<<" - "<<Pri[i]<<"\n\n";
    }
    cout<<"\n-------------------------------------\n";
}
 QueuePriority::~QueuePriority()
{
 delete[]Wait;
    delete[]Pri;
}
 QueuePriority::QueuePriority(int m)
{
MaxQueueLength=m;
 Wait=new string[MaxQueueLength];
    Pri=new int[MaxQueueLength];
    QueueLength = 0;
}
 void QueuePriority::Clear()
{
QueueLength = 0;
}
 bool QueuePriority::IsEmpty()
{
    return QueueLength == 0;
}
 bool QueuePriority::IsFull()
{
    return QueueLength == MaxQueueLength;
}
 int QueuePriority::GetCount()
{
   return QueueLength;
}
 void QueuePriority::push(string c,int p)
{
if(!IsFull()){
        Wait[QueueLength] = c;
        Pri[QueueLength] = p;
        QueueLength++;
    }
}
string QueuePriority::Extract()
}
if(!IsEmpty())
{ 
        int max_pri=Pri[2];
  int pos_max_pri=0;
        int curr = 3;
 for(int i=0; i<QueueLength;i++)
 {
            if(Pri[i]<curr)
                max_pri =Pri[i];
                pos_max_pri = i;
 }
 string temp1=Wait[pos_max_pri];
 for(int i=pos_max_pri;i<QueueLength-1;i++)
   {
            Wait[i]=Wait[i+1];
            Pri[i]=Pri[i+1];
        }
        QueueLength--;
        return temp1;
  }
    else return "-1";
}
 int random(int min, int max) 
{
  static bool first = true;
    if (first)
    {
        srand( time(NULL) ); 
        first = false;
    }
    return min + rand() % (( max + 1 ) - min);
}
 int main()
{
    int size = 10;
    cin>>size;
    QueuePriority QUP(size);
    cout<<"command"<<endl;
    QUP.push("K",2);
    QUP.push("P",3);
    QUP.push("M",1);
    QUP.Show();
    QUP.Extract();
    QUP.Show();
}
